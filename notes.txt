Create useful functions in .mongorc.js file?
  - where is this file located?
  - are these functions accessible via Python?
  - is this even advantageous over just doing function in Python program?
  - probably not...
  - BUT, useful for manually mucking around in db? yeah
  - for example, functions to:
    - delete a game and recalculate all stats from that point forward
    - update/correct a game
    - add a game
    - add/update a player
    - add/update/delete goals (related to update/correct a game)

TODO:
  - add authentication to the mongoDB to prevent people corrupting
  - what about automatically backing up the mongoDB periodically (replica)? to where?
  - learn how to have secondary indexes (i.e. player id, shortname, fullname, rfid, etc.)
  - learn how to enforce uniqueness of an index
    - db.testPlayers.ensureIndex( {shortname:1}, { unique: true })
    - db.testPlayers.ensureIndex( {fullname:1}, { unique: true, sparse: true })
    - db.testPlayers.ensureIndex( {rfid:1}, { unique: true, sparse: true })
  - learn if collection/table format can be enforced
  - learn about cursor snapshot mode for reading a table, calculating stats, while another game could be adding goals, for instance
  - decide if goals and/or stats should be embedded in games
    - there are lots of reasons to do this
    - many times there's info needed about the game when reporting goal-related info
    - performance benefits
    - deleting a game is super easy
  - do we want to allow tracking of defense/offense player per team?
    - do you win or lose more when you play offense or defense?
    - who is the best defender/offender? who is the worst?
    - who is the best at scoring against you? at defending against you?
    - who scores the most from defense?
    - add the Rybicki button to track who get put back most, and who puts back most
    - add disrespect button...
  - use aggregation to calculate stats efficiently?

MongoDB - default 127.0.0.1:27017
database - foosball
collection - testPlayers
Entry Structure:
{
        "fullname" : "Kipp Bowen",     # players full name (optional, defaults to same as shortname)
        "shortname" : "Kipp",          # something easy to type in (jkb, kipp)
        "_id" : <autogenerated>        # unique player id
                                       # _id could be modified to be rfid or some other id used for auto entry via a sensor
}

collection - testGames # Should we have two collections, 2 player and 4 player?
Entry structure:
{
        "_id" : <autogenerated>,       # unique id for each game
        "timestamp" : <date/time>,     # date/time of kickoff
	"players" : 2,                 # number of players, either 2 or 4
	"player1" : <testPlayers._id>, # id of player 1
	"player2" : <testPlayers._id>, # id of player 2
	"player3" : <testPlayers._id>, # id of player 3 (null if 2 player?)
	"player4" : <testPlayers._id>, # id of player 4 (null if 2 player?)
                                       # Note: which players belong to same team in 4 player?
                                       # Could be 1+2 vs. 3+4 or 1+3 vs 2+4
                                       # That way it's always 1 vs 2
}

collection - testGoals (should goals be embedded in a game?)
Entry structure:
{
        "_id" : <autogenerated>,       # unique goal id
        "timestamp" : <date/time>,     # date/time goal was scored
        "game_id" : <testGames._id>,   # id of associated game
        "team_id" : 0                  # 0 (player 1's team) or 1
}

collection - testStats (should stats be embedded in a game?)
Entry structure:
{
        "_id" : <autogenerated>,       # unique stats id
        "player_id" : testPlayers._id, # unique id of player
        "game_id" : testGames._id,     # id of game that triggered this stats calculation
        "timestamp" : <date/time>      # date/time of stats calculation (or of game kickoff? or of game-ending score?
                                       # timestamp is kind of redundant since this is associated with a specific game
                                       # thought is having a timestamp here will eliminate need to get timestamp from testGames when showing stats history for a player
        "games_won" : 0,
        "games_lost" : 0,
        "goals_for" : 0,
        "goals_against" : 0,
        "2player_skill" : 0,
        "4player_skill" : 0,
        "overall_skill" : 0,
        "average_game_duration: 0,
        "longest_game_duration: 0,
        "shortest_game_duration: 0,
        "average_goalfor_duration: 0,
        "longest_goalfor_duration: 0,
        "shortest_goalfor_duration: 0,
        "average_goalagainst_duration: 0,
        "longest_goalagainst_duration: 0,
        "shortest_goalagainst_duration: 0,
        "current_goals_streak": 0,
        "best_goals_streak": 0,
        "worst_goals_streak": 0        # longest drought
}
